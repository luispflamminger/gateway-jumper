# SPDX-FileCopyrightText: 2025 Deutsche Telekom IT GmbH
#
# SPDX-License-Identifier: Apache-2.0

name: CI

# Required environment setup:
# Variables:
# - REGISTRY_HOST: Container registry host (e.g. mtr.devops.telekom.de)
# - REGISTRY_REPO: Repository path (e.g. /tardis-internal/gateway/jumper-sse)
# - REGISTRY_USER: Container registry username
# - JAVA_VERSION: Java version to use (defaults to '17' if not specified)
# - JAVA_DISTRIBUTION: Java distribution to use (defaults to 'temurin' if not specified)
#
# Required secrets:
# - REGISTRY_TOKEN: Container registry token/password
# - ORT_ARTIFACTORY_TOKEN: Token for accessing ORT repository

on:
  pull_request:
  workflow_dispatch:
    inputs:
      release_version:
        description: "The next release version"
        type: string
  push:
    branches:
      - main
    tags:
      - '*'

permissions:
  contents: read

env:
  JAVA_VERSION: ${{ vars.JAVA_VERSION || '17' }}
  JAVA_DISTRIBUTION: ${{ vars.JAVA_DISTRIBUTION || 'zulu' }}

jobs:
  # ------------
  # Analysis Jobs
  # ------------
  check-changes:
    name: Check which files changed
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
      contents: read
    # Set job outputs to values from filter step
    outputs:
      deps: ${{ steps.filter.outputs.deps }}
    steps:
      - name: Checkout project
        if: github.event_name != 'pull_request' # Checkout not necessary for PRs
        uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            deps:
              - 'pom.xml'
              
  # ------------
  # Linting Jobs
  # ------------
  lint-reuse:
    name: Check REUSE compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@v5

  lint-maven:
    name: Check Java code style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
      - name: Check code formatting with Spotless
        run: mvn com.diffplug.spotless:spotless-maven-plugin:check
        
  ort-scan:
    name: ORT scan
    runs-on: ubuntu-latest
    needs: [check-changes]
    permissions:
      contents: write
    if: ${{ needs.check-changes.outputs.deps == 'true' }} # Only run if deps have changed
    steps:
      - name: Use HTTPS for Git cloning
        run: |
          git config --global url.https://github.com/.insteadOf ssh://git@github.com/
          git config --global url.https://github.com/.insteadOf git://github.com/
      - name: Checkout project
        uses: actions/checkout@v3
      - name: Prepare ORT config
        run: |
          # Move into default config dir
          export ORT_CONFIG_DIR=$HOME/.ort/config
          mkdir -p ${ORT_CONFIG_DIR}
          cd ${ORT_CONFIG_DIR}
          # Checkout default config repo
          git init -q
          git remote add origin https://github.com/oss-review-toolkit/ort-config.git
          git fetch -q --depth 1 origin main
          git checkout -q FETCH_HEAD
          # Copy custom config into config dir if it exists
          if [ -f "${GITHUB_WORKSPACE}/.github/ort/config.yml" ]; then
            cp ${GITHUB_WORKSPACE}/.github/ort/config.yml ${ORT_CONFIG_DIR}
          fi
      - name: Run GitHub Action for ORT
        id: ort
        uses: oss-review-toolkit/ort-ci-github-action@v1
        with:
          fail-on: violations
          docker-cli-args: >-
            -e ORT_ARTIFACTORY_TOKEN=${{ secrets.ORT_ARTIFACTORY_TOKEN }}
          image: ghcr.io/oss-review-toolkit/ort:main # TODO: remove this once ort 64.0.1 is released
          run: >
            cache-dependencies,
            cache-scan-results,
            labels,
            analyzer,
            scanner,
            advisor,
            evaluator,
            reporter
        # We're not using the built-in upload functionality of the ort action,
        # because it is not executed if one of the previous stages fails with a
        # non-zero exit code
      - name: Manually upload ORT results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ort-results
          path: ${{ steps.ort.outputs.results-path }}
      - name: Submit SBOM to dependency graph
        if: always()
        uses: advanced-security/spdx-dependency-submission-action@v0.1.1
        with:
          filePath: ${{ steps.ort.outputs.results-path }}"

  # -------------
  # Building Jobs
  # -------------
  build-maven:
    name: Build Maven project
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
      - name: Cache compiled classes
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-maven-target-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-maven-target-
      - name: Build with Maven
        run: |
          mvn -B package -DskipTests -U
      - name: Extract version
        id: extract-version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: maven-build
          path: ./target/*.jar

  # ---------
  # Test jobs
  # ---------
  test-maven:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: [build-maven]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
      - name: Cache compiled classes
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-maven-target-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-maven-target-
      - name: Run tests
        run: mvn -B test
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            **/target/surefire-reports/

  # --------------------------
  # Image Building Jobs
  # --------------------------
  build-push-image:
    name: Build & push Docker image
    runs-on: ubuntu-latest
    needs: [build-maven, test-maven]
    outputs:
      image-digest: ${{ steps.build-push.outputs.digest }}
      image-tag: ${{ steps.tag.outputs.image-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Maven build artifacts
        uses: actions/download-artifact@v4
        with:
          name: maven-build
          path: "target"
      - name: Inject slug vars
        uses: rlespinasse/github-slug-action@v5
      - name: Determine tag
        id: tag
        run: | # TODO: metadata-action
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "This workflow was triggered by workflow_dispatch."
            export TAG=${{ github.event.inputs.release_version }}
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "This workflow was triggered by a tag push ${GITHUB_REF}"
            export TAG=$(echo ${GITHUB_REF} | sed 's|^refs/tags/||')
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "This workflow was triggered by a pull request."
            export TAG=pr-${{ github.event.pull_request.number }}-${GITHUB_HEAD_REF_SLUG}
          elif [[ "${GITHUB_REF_POINT_SLUG}" == "main" ]]; then
            export TAG="latest"
          else
            export TAG=${GITHUB_REF_POINT_SLUG}
          fi
          echo "Image tag will be: ${TAG}"
          echo "image-tag=${TAG}" >> "${GITHUB_OUTPUT}"
      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY_HOST }}
          username: ${{ vars.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        id: build-push
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_SUMMARY: false
        with:
          context: .
          tags: ${{ vars.REGISTRY_HOST }}${{ vars.REGISTRY_REPO }}:${{ steps.tag.outputs.image-tag }}
          cache-from: type=registry,ref=${{ vars.REGISTRY_HOST }}${{ vars.REGISTRY_REPO }}:latest
          cache-to: type=inline
          build-args: |
            BASE_IMAGE=mtr.devops.telekom.de/tardis-internal/distroless:java-17
          push: true
          platforms: linux/amd64

  scan-image:
    name: Scan image
    runs-on: ubuntu-latest
    needs: [build-push-image]
    permissions:
      contents: write
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        env:
          TRIVY_USERNAME: ${{ vars.REGISTRY_USER }}
          TRIVY_PASSWORD: ${{ secrets.REGISTRY_TOKEN }}
        with:
          image-ref: '${{ vars.REGISTRY_HOST }}${{ vars.REGISTRY_REPO }}@${{ needs.build-push-image.outputs.image-digest }}'
          exit-code: '0'
          vuln-type: os # library findings are handled by ort and github auto submission
          # Only push results to dependency graph if running on main
          format: ${{ github.event_name == 'pull_request' && 'table' || 'github' }}
          output: ${{ github.event_name == 'pull_request' && '' || 'dependency-results.sbom.json' }}
          github-pat: ${{ secrets.GITHUB_TOKEN }}

